@page "/settings/download";

@using Niconicome.Views.Setting.V2.Shared;
@using Models.Domain.Local.Settings.Enum;

@inject IJSRuntime JS;
@inject VM::Setting.V2.Page.DownloadViewModel DataContext;

<div class="SettingPage FilePage">
    <div class="SideMenu">
        <SideMenu />
    </div>
    <div class="Body">

        <h3>ダウンロード設定</h3>

        <div class="SettingContent">
            <p class="Title"><i class="Icon fa-solid fa-clock"></i>過去ログ取得時の待機時間（ミリ秒）</p>
            <div class="input-group mb-3 Input">
                <input type="text" class="form-control" @bind="DataContext.CommentFetchWaitSpan.Value">
            </div>
        </div>

        <div class="SettingContent">
            <p class="Title"><i class="Icon fa-solid fa-folder"></i>一時フォルダーの最大保持数</p>
            <div class="input-group mb-3 Input">
                <input type="text" class="form-control" @bind="DataContext.MaxTmpDirCount.Value">
            </div>
        </div>

        <div class="SettingContent">
            <p class="Title"><i class="Icon fa-solid fa-box"></i>【上級者向け】コレクション1ブロックあたりのコメント数（推奨値：100）</p>
            <div class="input-group mb-3 Input">
                <input type="text" class="form-control" @bind="DataContext.CommentCountPerBlock.Value">
            </div>
        </div>

        <div class="SettingContent">
            <p class="Title"><i class="Icon fa-solid fa-file-export"></i>動画のダウンロードに外部ソフトを使用する</p>
            <select class="form-select Select" @bind="DataContext.ExternalDownloaderSetting.Value">
                @foreach (var x in DataContext.SelectableExternalDownloaderSetting)
                {
                    <option value="@x.Value">@x.DidplayValue</option>
                }
            </select>
        </div>

        @if (DataContext.ExternalDownloaderSetting.Value != ExternalDownloaderConditionSetting.Disable)
        {
            <div class="SettingContent">
                <label class="Title"><i class="Icon fa-solid fa-arrow-up-right-from-square"></i>外部ダウンローダーのパス</label>
                <div class="input-group mb-3 Input">
                    <input class="form-control" type="text" @bind="DataContext.ExternalDownloaderPath.Value">
                </div>
            </div>

            <div class="SettingContent">
                <label class="Title"><i class="Icon fa-solid fa-terminal"></i>外部ダウンローダーのパラメーター</label>
                <div class="input-group mb-3 Input">
                    <input class="form-control" type="text" @bind="DataContext.ExternalDownloaderParam.Value">
                </div>
            </div>

            <div class="Detail accordion">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingOne">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#FileFormatDetail">
                            外部ダウンローダーについて
                        </button>
                    </h2>
                    <div id="FileFormatDetail" class="accordion-collapse collapse">
                        <div class="accordion-body">
                            実行ファイルパスは実行ファイルの絶対パスを指定してください。(例: C:\downloader\some-downloader.exe)<br />
                            ただし、実行ファイルのパスが通っている場合は、ファイル名を利用することが出来ます。<br />
                            ※Windowsの環境変数についての更に詳しい情報は<a href="https://www.atmarkit.co.jp/ait/articles/1805/11/news035.html">＠IT様の記事</a>をご覧ください。<br />
                            パラメーターは<br />
                            &lt;NiconicoID&gt;：動画ID<br />
                            &lt;URL&gt;：視聴ページのURL<br />
                            &lt;OutputPath&gt;：保存ファイルパス<br />
                            が置き換え対象の文字列として使用できます。
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="SettingContent">
            <p class="Title" title="大きなすぎる場合、失敗する確率が高くなります"><i class="Icon fa-solid fa-download"></i>最大並列ダウンロード数</p>
            <select class="form-select Select" @bind="DataContext.MaxParallelDownloadCount.Value">
                @foreach (var x in DataContext.SelectableMaxParallelDownloadCount)
                {
                    <option value="@x.Value">@x.DidplayValue</option>
                }
            </select>
        </div>

        <div class="SettingContent">
            <p class="Title" title="大きなすぎる場合、失敗する確率が高くなります"><i class="Icon fa-solid fa-file-download"></i>HLSセグメントファイルの最大並列ダウンロード数（推奨値：1）</p>
            <select class="form-select Select" @bind="DataContext.MaxParallelSegmentDownloadCount.Value">
                @foreach (var x in DataContext.SelectableMaxParallelSegmentDownloadCount)
                {
                    <option value="@x.Value">@x.DidplayValue</option>
                }
            </select>
        </div>

        <div class="SettingContent">
            <p class="Title"><i class="Icon fa-solid fa-circle-info"></i>動画情報ファイルの保存形式</p>
            <select class="form-select Select" @bind="DataContext.VideoInfoType.Value">
                @foreach (var x in DataContext.SelectableVideoInfoType)
                {
                    <option value="@x.Value">@x.DidplayValue</option>
                }
            </select>
        </div>

        <div class="SettingContent">
            <label class="Title" for="downloadAll" title="無効にすると現在のプレイリストの動画のみDLします"><i class="Icon fa-solid fa-list"></i>メインページのダウンロードボタンでキューのタスク全てをDLする</label>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="downloadAll" @bind="DataContext.IsDownloadFromQueueEnable.Value">
            </div>
        </div>

        <div class="SettingContent">
            <label class="Title" for="allowDupe" title="無効にするとひとつのプレイリストから同じ動画を同時にDLすることが出来ません"><i class="Icon fa-solid fa-list-check"></i>ステージ時の重複（同一プレイリスト内での登録）を許可する（非推奨）</label>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="allowDupe" @bind="DataContext.IsDupeOnStageAllowed.Value">
            </div>
        </div>

        <div class="SettingContent">
            <label class="Title" for="overrideDT"><i class="Icon fa-solid fa-calendar-days"></i>動画ファイルの更新日時を投稿日時にする</label>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="overrideDT" @bind="DataContext.IsOverrideVideoFileDTToUploadedDT.Value">
            </div>
        </div>

        <div class="SettingContent">
            <label class="Title" for="resume"><i class="Icon    fa-solid fa-arrows-rotate"></i>可能な場合は動画ファイルのDLをレジュームする</label>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="resume" @bind="DataContext.IsDownloadResumingEnable.Value">
            </div>
        </div>

        <div class="SettingContent">
            <label class="Title" for="deleteEco"><i class="Icon fa-solid fa-trash"></i>非エコノミーファイルをDL後、エコノミーファイルを削除</label>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="deleteEco" @bind="DataContext.IsDeletingExistingEconomyFileEnable.Value">
            </div>
        </div>

        <div class="SettingContent">
            <label class="Title" for="omitXML"><i class="Icon fa-solid fa-code"></i>コメントファイルにXML宣言を追加しない</label>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="omitXML" @bind="DataContext.IsOmitXmlDeclarationEnable.Value">
            </div>
        </div>

        <div class="SettingContent">
            <label class="Title" for="enableNewCommentDL" title="コメントの取りこぼしが最小限になりますが、挙動が不安定になる可能性があります。"><i class="Icon fa-solid fa-flask"></i>実験的なコメントDLシステムを有効にする</label>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="enableNewCommentDL" @bind="DataContext.IsExperimentalCommentDownloadSystemEnable.Value">
            </div>
        </div>

        <div class="SettingContent">
            <label class="Title" for="playSoundAfterDL"><i class="Icon fa-solid fa-circle-play"></i>DL完了時に音声を再生する</label>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="playSoundAfterDL" @bind="DataContext.PlaySoundAfterDownloadCompleted.Value">
            </div>
        </div>

        @if (DataContext.PlaySoundAfterDownloadCompleted.Value)
        {
            <div class="SettingContent">
                <label class="Title"><i class="Icon fa-solid fa-arrow-up-right-from-square"></i>音声ファイルのパス</label>
                <div class="input-group Input">
                    <input class="form-control" type="text" @bind="DataContext.AudioFilePath.Value">
                </div>
            </div>
        }

        <div class="SettingContent">
            <label class="Title" for="modifyVideo"><i class="Icon fa-solid fa-industry"></i>動画をDL後に外部ソフトで処理する</label>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="modifyVideo" @bind="DataContext.IsVideoModificationEnable.Value">
            </div>
        </div>

        @if (DataContext.IsVideoModificationEnable.Value)
        {
            <div class="SettingContent">
                <label class="Title"><i class="Icon fa-solid fa-gear"></i>外部ソフトウェアのパス</label>
                <div class="input-group Input">
                    <input class="form-control" type="text" @bind="DataContext.VideoModificationSoftwarePath.Value">
                </div>
            </div>

            <div class="SettingContent">
                <label class="Title"><i class="Icon fa-solid fa-gears"></i>外部ソフトウェアのパラメーター</label>
                <div class="input-group Input">
                    <input class="form-control" type="text" @bind="DataContext.VideoModificationSoftwareParam.Value">
                </div>
            </div>


            <div class="Detail accordion">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingOne">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#VideoModificationDetail">
                            外部ソフトウェアについて
                        </button>
                    </h2>
                    <div id="VideoModificationDetail" class="accordion-collapse collapse">
                        <div class="accordion-body">
                            実行ファイルパスは実行ファイルの絶対パスを指定してください。(例: C:\downloader\some-downloader.exe)<br />
                            ただし、実行ファイルのパスが通っている場合は、ファイル名を利用することが出来ます。<br />
                            ※Windowsの環境変数についての更に詳しい情報は<a href="https://www.atmarkit.co.jp/ait/articles/1805/11/news035.html">＠IT様の記事</a>をご覧ください。<br />
                            パラメーターは<br />
                            &lt;ServerURL&gt;：内部サーバー上のURL(m3u8ファイル)<br />
                            &lt;FilePath&gt;：Mp4ファイルの保存パス(ファイル名のフォーマットで設置した形式)<br />
                            が置き換え対象の文字列として使用できます。<br />
                            例えば、<a href="https://streamlink.github.io/">streamlink</a>などが利用できます。<br />
                            ※ニコニコが採用しているHLS+AES(実際はAWS MediaConvertの機能？)方式で配信される動画を復号・保存することが技術的保護手段(<a href="https://laws.e-gov.go.jp/law/345AC0000000048#Mp-Ch_2-Se_3-Ss_5-At_30">著作権法第三十条1号二項</a>)に該当するかどうかは、判例が出るまでは分かりませんが、本ソフトウェアで従来のようにmp4ファイルを直接保存する機能を提供する予定はありません。mp4ファイルを保存したい場合は、この設定を用いて自己責任で行ってください。
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

</div>

@code {
    private SynchronizationContext? ctx;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.ctx = SynchronizationContext.Current;
        DataContext.Bindables.RegisterPropertyChangeHandler(() =>
        {
            this.ctx?.Post(_ => this.StateHasChanged(), null);
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }
}
