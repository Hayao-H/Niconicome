@page "/settings/debug";

@using Niconicome.Views.Setting.V2.Shared;
@inherits BlazorBase;

@inject IJSRuntime JS;
@inject VM::Setting.V2.Page.DebugViewModel DataContext;

<div class="SettingPage DebugPage">
    <div class="SideMenu">
        <SideMenu />
    </div>
    <div class="Body">

        <h3>デバッグ設定</h3>

        <div class="Alert alert @(DataContext.AlertTypeClass.Value) @(DataContext.AlertVisibilityClass.Value)" role="alert">
            @(DataContext.AlertContent.Value)
        </div>

        <div class="SettingContent">
            <p class="Title"><i class="Icon fa-solid fa-circle-info"></i>現在のログファイルのパス</p>
            <button type="button" class="btn btn-primary" @onclick="DataContext.CopyLogFIlePath"><i class="fa-solid fa-clipboard"></i></button>
        </div>

        <p class="LogFilePath">@(DataContext.LogFilePath)</p>

        <div class="SettingContent">
            <label class="Title" for="debug"><i class="Icon fa-solid fa-bug"></i>デバッグモード</label>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="debug" @bind="DataContext.IsDebugMode.Value">
            </div>
        </div>

        <div class="SettingContent">
            <label class="Title" for="devMode"><i class="Icon fa-solid fa-wrench"></i>アドオン開発者モード</label>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="devMode" @bind="DataContext.IsDevMode.Value">
            </div>
        </div>

    </div>
</div>

@code {
    private SynchronizationContext? ctx;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.ctx = SynchronizationContext.Current;
        DataContext.Bindables.RegisterPropertyChangeHandler(() =>
        {
            this.ctx?.Post(_ => this.StateHasChanged(), null);
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }
}
