// src/shared/AttemptResult.ts
var AttemptResultWidthDataImpl = class {
  constructor(isSucceeded, data, message) {
    this.IsSucceeded = isSucceeded;
    this.Data = data;
    this.Message = message;
  }
  static Succeeded(data) {
    return new AttemptResultWidthDataImpl(true, data, null);
  }
  static Fail(message) {
    return new AttemptResultWidthDataImpl(false, null, message);
  }
};

// src/shared/ElementHandler.ts
var ElementHandlerImpl = class {
  Get(query) {
    let result;
    try {
      result = document.querySelector(query);
    } catch (e) {
      return AttemptResultWidthDataImpl.Fail(`\u8981\u7D20\u3092\u53D6\u5F97\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F\u3002(\u8A73\u7D30\uFF1A${e.message})`);
    }
    return result == null ? AttemptResultWidthDataImpl.Fail("\u6307\u5B9A\u3055\u308C\u305F\u8981\u7D20\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3002") : AttemptResultWidthDataImpl.Succeeded(result);
  }
  GetAll(query) {
    let result;
    try {
      result = document.querySelectorAll(query);
    } catch (e) {
      return AttemptResultWidthDataImpl.Fail(`\u8981\u7D20\u3092\u53D6\u5F97\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F\u3002(\u8A73\u7D30\uFF1A${e.message})`);
    }
    return AttemptResultWidthDataImpl.Succeeded(result);
  }
};

// src/videoList/widthHandler/ElementIds.ts
var ElementIDs = class {
};
ElementIDs.PageContent = ".PageContent";
ElementIDs.VideoListHeader = "#VideoListHeader";
ElementIDs.Separator = ".Separator";

// src/videoList/widthHandler/widthHandler.ts
var WidthHandlerImpl = class {
  constructor(elementHandler) {
    this._isResizing = false;
    this._elmHandler = elementHandler;
    this._headerColumnIDs = {
      "0": "#CheckBoxColumn",
      "1": "#ThumbnailColumn",
      "2": "#TitleColumn",
      "3": "#UploadedDateTimeColumn",
      "4": "#ViewCountColumn",
      "5": "#CommentCountColumn",
      "6": "#MylistCountColumn"
    };
    this._columnClassNames = {
      "0": ".CheckBoxColumn",
      "1": ".ThumbnailWrapper",
      "2": ".TitleColumn",
      "3": ".UploadedDateTimeColumn",
      "4": ".ViewCountColumn",
      "5": ".CommentCountColumn",
      "6": ".MylistCountColumn"
    };
    this._separatorIDs = {
      "0": "#CheckBoxColumnSeparator",
      "1": "#ThumbnailColumnSeparator",
      "2": "#TitleColumnSeparator",
      "3": "#UploadedDateTimeColumnSeparator",
      "4": "#ViewCountColumnSeparator",
      "5": "#CommentCountColumnSeparator",
      "6": "#MylistCountColumnSeparator"
    };
  }
  //#endregion
  Initialize() {
    const sepResult = this._elmHandler.GetAll(ElementIDs.Separator);
    if (!sepResult.IsSucceeded || sepResult.Data === null)
      return;
    sepResult.Data.forEach((elm) => {
      if (!(elm instanceof HTMLElement))
        return;
      const indexS = elm.dataset.index;
      if (indexS == void 0)
        return;
      elm.addEventListener("mousedown", (_) => this.OnMouseDown(indexS));
    });
    const pageResult = this._elmHandler.Get(ElementIDs.PageContent);
    if (!pageResult.IsSucceeded || pageResult.Data === null || !(pageResult.Data instanceof HTMLElement))
      return;
    pageResult.Data.addEventListener("mouseup", (_) => this.OnMouseUp());
    const headerResult = this._elmHandler.Get(ElementIDs.VideoListHeader);
    if (!headerResult.IsSucceeded || headerResult.Data === null || !(headerResult.Data instanceof HTMLElement))
      return;
    headerResult.Data.addEventListener("mousemove", (e) => this.OnMouseMove(e));
  }
  //#region private
  OnMouseDown(index) {
    this._isResizing = true;
    this._resizingIndex = index;
  }
  OnMouseUp() {
    this._isResizing = false;
    this._resizingIndex = null;
  }
  OnMouseMove(e) {
    if (!this._isResizing || this._resizingIndex === null)
      return;
    const nextIndex = Number(this._resizingIndex) + 1;
    const headerResult = this._elmHandler.Get(this._headerColumnIDs[this._resizingIndex]);
    const nextHeaderResult = this._elmHandler.Get(this._headerColumnIDs[`${nextIndex}`]);
    const headerWrapperResult = this._elmHandler.Get(ElementIDs.VideoListHeader);
    const columnResult = this._elmHandler.GetAll(this._columnClassNames[this._resizingIndex]);
    const nextColumnResult = this._elmHandler.GetAll(this._columnClassNames[`${nextIndex}`]);
    const sepResult = this._elmHandler.Get(this._separatorIDs[this._resizingIndex]);
    if (!headerResult.IsSucceeded || headerResult.Data === null || !columnResult.IsSucceeded || columnResult.Data === null || !sepResult.IsSucceeded || sepResult.Data === null || !headerWrapperResult.IsSucceeded || headerWrapperResult.Data === null || !nextHeaderResult.IsSucceeded || nextHeaderResult.Data === null || !nextColumnResult.IsSucceeded || nextColumnResult.Data === null)
      return;
    if (!(headerResult.Data instanceof HTMLElement))
      return;
    if (!(nextHeaderResult.Data instanceof HTMLElement))
      return;
    const headerRect = headerResult.Data.getBoundingClientRect();
    const headerWrapperRect = headerWrapperResult.Data.getBoundingClientRect();
    const width = e.clientX - headerRect.left;
    const deltaWidth = width - headerResult.Data.offsetWidth;
    const nextWidth = nextHeaderResult.Data.offsetWidth - deltaWidth;
    headerResult.Data.style.width = `${width}px`;
    nextHeaderResult.Data.style.width = `${nextWidth}px`;
    columnResult.Data.forEach((elm) => {
      if (!(elm instanceof HTMLElement))
        return;
      elm.style.width = `${width}px`;
    });
    nextColumnResult.Data.forEach((elm) => {
      if (!(elm instanceof HTMLElement))
        return;
      elm.style.width = `${nextWidth}px`;
    });
    if (!(headerWrapperResult.Data instanceof HTMLElement))
      return;
    if (!(sepResult.Data instanceof HTMLElement))
      return;
    const left = headerRect.left - headerWrapperRect.left + width - 10;
    sepResult.Data.style.left = `${left}px`;
  }
  //#endregion
};

// src/videoList/main.ts
function main() {
  console.log("Hello World!!");
  const elmHandler = new ElementHandlerImpl();
  const widthHandler = new WidthHandlerImpl(elmHandler);
  widthHandler.Initialize();
}
export {
  main
};
//# sourceMappingURL=data:application/json;base64,
